{
    "contents" : "suppressMessages({\n  library(bit64)\n  library(curl)\n  library(faosws)\n  library(faoswsUtil)\n  library(lme4)\n  library(data.table)\n  library(magrittr)\n  library(reshape2)\n  library(igraph)\n  library(plyr)\n  library(dplyr)\n  library(RJDBC)\n  library(ggplot2)\n})\n\n\nupdateModel = TRUE\n\n## Set up for the test environment and parameters\nR_SWS_SHARE_PATH <- Sys.getenv(\"R_SWS_SHARE_PATH\")\nDEBUG_MODE <- Sys.getenv(\"R_DEBUG_MODE\")\n\n\nif(!exists(\"DEBUG_MODE\") || DEBUG_MODE == \"\") {\n  if(Sys.info()[7] == \"Golini\"){ # Nata's work computer\n    SetClientFiles(dir = \"~/R certificate files/Production/\")\n     files = dir(\"~/GitHub/faoswsLoss_NG/R/\", full.names = TRUE)[-10]\n    token = \"e16a500b-2077-471b-8edf-6d810a85814d\" # Nata's token \n  } else {\n    stop(\"User not yet implemented!\")\n  }\n  \n  GetTestEnvironment(\n    ## baseUrl = \"https://hqlqasws1.hq.un.fao.org:8181/sws\",\n    baseUrl = \"https://hqlprswsas1.hq.un.fao.org:8181/sws\",\n    token = token\n  )  \n  \n  sapply(files, source)\n}\n\n## Year should be a paramameter selected.\nselectedYear = as.character(1961:2015)\n\nareaVar = \"geographicAreaM49\"\nyearVar = \"timePointYears\"\nitemVar = \"measuredItemCPC\"\nelementVar = \"measuredElement\"\nvaluePrefix = \"Value_\"\nflagObsPrefix = \"flagObservationStatus_\"\nflagMethodPrefix = \"flagMethod_\"\n\n\n\n\nif(updateModel){\n  finalModelData = \n{\n  requiredItems <<- getRequiredItems()\n  production <<- getProductionData()\n  setwd(\"~/GitHub/faoswsLoss_NG/R/\")\n  source(\"sws_query.r\")\n  import <<- getImportData()\n  loss <<- getOfficialLossData()\n  lossFoodGroup <<- getLossFoodGroup()\n#   countryTable <<-\n#     GetCodeList(domain = \"agriculture\",\n#                 dataset = \"agriculture\",\n#                 dimension = \"geographicAreaM49\")[type == \"country\",\n#                                                  list(code, description)]\n#   setnames(countryTable,\n#            old = c(\"code\", \"description\"),\n#            new = c(\"geographicAreaM49\", \"geographicAreaM49Name\"))\n} %>%\n  mergeAllLossData(lossData = loss, production, import, lossFoodGroup) %>%\n  subset(x = .,\n         subset = ((Value_measuredElement_5510 == 0 & Value_measuredElement_5600 > 0) |\n                     (Value_measuredElement_5510 > 0 & Value_measuredElement_5600 >= 0)),\n         select = c(\"geographicAreaM49\", \n                    \"measuredItemCPC\", \n                    \"timePointYears\",\n                    \"Value_measuredElement_5120\", # loss\n                    \"Value_measuredElement_5510\", # production\n                    \"Value_measuredElement_5600\", # import\n                    \"foodGroupName\",\n                    \"foodPerishableGroup\")) %>%\n  removeCarryLoss(data = ., lossVar = \"Value_measuredElement_5120\") %>%\n  ## Convert variables to factor\n  .[, `:=`(c(\"geographicAreaM49\",\n             \"measuredItemCPC\", \n             \"foodGroupName\", \n             \"foodPerishableGroup\"),\n           lapply(c(\"geographicAreaM49\",\n                    \"measuredItemCPC\", \n                    \"foodGroupName\", \n                    \"foodPerishableGroup\"),\n                  FUN = function(x) as.factor(.SD[[x]])\n           )\n  )\n  ]\n\n\nlossLmeModel =\n  lmer(log(Value_measuredElement_5120 + 1) ~\n         -1 +\n         timePointYears +\n         log(Value_measuredElement_5510 + 1) + \n         (-1 + log(Value_measuredElement_5510 + 1)|\n            foodPerishableGroup/foodGroupName/measuredItemCPC/geographicAreaM49)+\n         log(Value_measuredElement_5600 + 1) +\n         (-1 + log(Value_measuredElement_5600 + 1)|\n            measuredItemCPC/geographicAreaM49),\n       data = finalModelData)\n\n# par(mfrow=c(1,1))\n# qqnorm(residuals(lossLmeModel))\n# qqline(residuals(lossLmeModel))\n\n# lossModelPath = paste0(R_SWS_SHARE_PATH, \"/lossLmeModel\")\n# saveRDS(lossLmeModel, lossModelPath)\n}\n\n\n\nfinalPredictData = \n{\n  if(!updateModel){\n#    requiredItems <<- getAllItemCPC()\n    production <<- getProductionData()\n    import <<- getImportData()\n    lossFoodGroup <<- getLossFoodGroup()\n#    lossRegionClass <<- getLossRegionClass()\n#     countryTable <<-\n#       GetCodeList(domain = \"agriculture\",\n#                   dataset = \"agriculture\",\n#                   dimension = \"geographicAreaM49\")[type == \"country\",\n#                                                    list(code, description)]\n#     setnames(countryTable,\n#              old = c(\"code\", \"description\"),\n#              new = c(\"geographicAreaM49\", \"geographicAreaM49Name\"))\n  }\n  loss <<- getSelectedLossData()\n} %>%\n  mergeAllLossData(lossData = loss, production, import, lossFoodGroup) %>%\n  subset(x = .,\n         subset = ((Value_measuredElement_5510 == 0 & Value_measuredElement_5600 > 0) |\n                     (Value_measuredElement_5510 > 0 & Value_measuredElement_5600 >= 0)),\n         select = c(\"geographicAreaM49\", \n                    \"measuredItemCPC\", \n                    \"timePointYears\",\n                    \"Value_measuredElement_5120\", # loss\n                    \"flagObservationStatus_measuredElement_5120\",\n                    \"Value_measuredElement_5510\", # production\n                    \"Value_measuredElement_5600\", # import\n                    \"foodGroupName\",\n                    \"foodPerishableGroup\")) %>%\n  removeCarryLoss(data = ., lossVar = \"Value_measuredElement_5120\") %>%\n  ## Convert variables to factor\n  .[, `:=`(c(\"geographicAreaM49\",\n             \"measuredItemCPC\", \n             \"foodGroupName\", \n             \"foodPerishableGroup\"),\n           lapply(c(\"geographicAreaM49\",\n                    \"measuredItemCPC\", \n                    \"foodGroupName\", \n                    \"foodPerishableGroup\"),\n                  FUN = function(x) as.factor(.SD[[x]])\n           )\n  )\n  ]\n\n\n\n## Impute selected data\nfinalPredictData %>%\n  imputeLoss(data = .,\n             lossVar = \"Value_measuredElement_5120\",\n             lossObservationFlagVar =\n               \"flagObservationStatus_measuredElement_5120\",\n             lossMethodFlagVar = \"flagMethod_measuredElement_5120\",\n             lossModel = lossLmeModel) \n#   %>%\n#   saveImputedLoss(data = .)\n\n# finalPredictDataSet %>%\n#   filter(flagObservationStatus_measuredElement_5120 == \" \")\n\n",
    "created" : 1448978593972.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "756900844",
    "id" : "8D857474",
    "lastKnownWriteTime" : 1448981273,
    "path" : "~/GitHub/faoswsLoss_NG/lossModule.R",
    "project_path" : "lossModule.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}