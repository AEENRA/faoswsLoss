{
    "contents" : "#' Get data from FAO statistical working system (SWS).\n#' \n#' @param area numeric or character vector with countries' ids (numeric) or \n#'   names (character).\n#' @param item numeric or character vector with items' ids (numeric) or names \n#'   (character).\n#' @param ele numeric or character vector with elements' ids (numeric) or names \n#'   (character).\n#' @param year numeric vector with years to fetch.\n#' @param symb optional character vector with symbols (flags) to fetch data type\n#'   of.\n#' @param melted logical, TRUE by default. Should the result data be returned in\n#'   long format (instead of one column per every year two columns: year and \n#'   corresponded value).\n#' @param value.names logical, TRUE by default. Should identificational vectors \n#'   (area and item) be converted from numeric ids to names.\n#' @param stringsAsFactors logical. Should character \n#'   identificational vectors be converted to factors.\n#' @param dbquery optional string with SQL-query to request from SWS.\n#' @param class.path optional string with path to Oracle Java Data Base\n#'   Connectivity library. By default 'ojdbc14.jar' in working directory.\n#' @param user optional string with name of SWS DB user instead of default user \n#'   'demo'.\n#' @param pass optional string with password of SWS DB user instead of default \n#'   password 'demo'.\n#'   \n#' @import RJDBC stringr reshape2\n#'   \n#' @return data.frame with results from SWS DB.\n\n\nsws_query <- function(area, item, ele, year, symb = T, melted = TRUE, \n                      value.names = T, \n                      stringsAsFactors = default.stringsAsFactors(),\n                      dbquery, class.path = '../ojdbc14.jar',\n                      user = 'demo', pass = 'demo') {\n  \n  \n  \n  # Check for ojdbc14.jar\n  if(!file.exists(class.path)) \n    stop(\"Oracle JDBC class not found. Please, put file ojdbc14.jar\ninto the working directory or specify full path with class.path argument.\")\n  \n  # Check for the internal connection\n  # Source of ping function:\n  # http://stackoverflow.com/questions/7012796/ping-a-website-in-r\n  ping <- function(x,stderr=FALSE,stdout=FALSE,...){\n    pingvec <- system2(\"ping\",paste('-n 1', x),\n                       stderr=FALSE,\n                       stdout=FALSE,...)\n    if (pingvec == 0) TRUE else FALSE\n  }\n  \n  if(!ping(\"lprdbwo1.fao.org\"))\n    stop(\"SWS DB accepts only internal connections. Please get a cable and find \nthe nearest ethernet socket :)\")\n  \n  # Packages\n  library(RJDBC)\n\n  \n  drv <- JDBC(driverClass = \"oracle.jdbc.driver.OracleDriver\",\n              classPath = class.path)\n  conn <- dbConnect(drv, \"jdbc:oracle:thin:@lprdbwo1:3310:fstp\",\n                    user = user, password = pass)\n  \n  # This is the exclusive request to DB in the function.\n  # All others just invoke sws_query with dbquery argument.\n  if(!missing(dbquery)) {\n    dboutput <- dbGetQuery(conn, dbquery)\n    dbDisconnect(conn)\n    return(dboutput)\n  }\n\n  library(stringr)\n  library(reshape2)\n  year_shift <- 1960\n  \n  # Function to convert year in colnames, e.g. from 00 to 1960\n  convertyear <- function(x) {\n    # Vectorizing the function\n    if(length(x) > 1) {\n      require(plyr)\n      return(unlist(llply(x, convertyear)))\n    }\n    \n    require(stringr)\n    if(!str_detect(x, '[0-9]{2}$')) return(x)\n    orignumb <- as.numeric(str_extract(x, '[0-9]{2}$'))\n    corryear <- orignumb + year_shift\n    corrname <- str_c(str_replace(x, '(^.*)([0-9]{2}$)', '\\\\1'), corryear)\n    corrname\n  }\n  \n  \n  # convert vectors in arguments to collapsed strings.\n  if(!missing(area)) area <- str_c(area, collapse=', ')\n  if(!missing(item)) item <- str_c(item, collapse=', ')\n  if(!missing(ele)) ele <- str_c(ele, collapse=', ')\n  \n  # In case user specifies only one ele and and one item we want function to \n  # return colname of value as name of ele instead of value.\n  # ...\n  \n  if(!missing(year) & symb) flag <- \n    str_c('SYMB_', formatC(year - year_shift, width=2, format='d', flag='0'),\n          collapse = ', ')\n  if(!missing(year)) year <- \n    str_c('NUM_', \n          formatC(year - year_shift, width=2, format='d', flag='0'), collapse=', ')\n\n  \n  # Constructing query\n  # Name of data base table. In case of using tsv_ics_work_yr it's not\n  # require to convert years from 00 to 1960. But possibly you need to \n  # remove totals.\n  dbmain <- 'TS_ICS_WORK_YR'\n  #dnmain <- 'TS_ICS_UPDBAL_YR'\n  \n  # WHAT part of query\n  if(value.names) \n    whatsql <- str_c('area.name_e as area',\n                     'item.name_e as item', \n                     sep = ', ') else\n      whatsql <- str_c('area', 'item', sep = ', ')\n  \n  \n  whatsql <- str_c(whatsql, 'ele', sep = ', ')\n  \n  if(!missing(year)) whatsql <- str_c(whatsql, year, sep=', ')\n  if(!missing(year) & symb) whatsql <- str_c(whatsql, flag, sep=', ')\n\n  \n  # FROM\n  fromsql <- dbmain\n  if(value.names) fromsql <- str_c(str_c('FAOSTAT.',fromsql),\n                                   'FAOSTAT.AREA, FAOSTAT.ITEM', sep = ', ')\n  \n  # WHERE\n  wheresql <- list()\n  if(!missing(area)) wheresql[length(wheresql) + 1] <- \n    str_c(dbmain, '.area in (', area, ') ')\n  if(!missing(item)) wheresql[length(wheresql) + 1] <-\n    str_c(dbmain, '.item in (', item, ') ')\n  if(!missing(ele)) wheresql[length(wheresql) + 1] <-\n    str_c(dbmain, '.ele in (', ele, ') ')\n#   if(length(wheresql == 0)) wheresql[1] <- '*'\n  \n  if(value.names) wheresql[length(wheresql) + 1] <- \n    str_c('AREA.AREA = ', dbmain, '.AREA and item.item = ', dbmain, '.item')\n  \n  wheresql <- str_c(unlist(wheresql), collapse=' and ')\n  \n  \n  constrdbquery <- str_c('select ', whatsql, ' from ', \n                         fromsql, ' where ', wheresql\n  )\n\n  # Ask the DB with constructed query\n  dboutput <- sws_query(class.path=class.path, dbquery=constrdbquery)\n  \n  colnames(dboutput) <- tolower(colnames(dboutput))\n#   colnames(dboutput)[1:2] <- c('area', 'item')\n  \n  # Converting colnames with years from 00 to 1960\n  if(tolower(dbmain) == 'ts_ics_work_yr') colnames(dboutput) <-\n    convertyear(colnames(dboutput))\n  \n  # Converting from wide format to long.\n  if(melted) {\n    \n    # Selecting part with values only (without symbols/flags)\n    valueswithoutsymb <- dboutput[, colnames(dboutput)[\n      str_detect(colnames(dboutput), perl('^(?!symb)'))]]\n    \n    # Melting\n    valueswithoutsymb <- \n      melt(valueswithoutsymb, measure.vars=\n             names(valueswithoutsymb[str_detect(names(valueswithoutsymb),\n                                          '^num_')]),\n           variable.name = 'year')\n    \n    # Convert character vector with year to numeric\n    valueswithoutsymb$year <- as.numeric(str_replace(valueswithoutsymb$year,\n                                                     '^num_', ''))\n    \n    # Converting part with symbols/flags\n    if(symb) {\n      flags <- dboutput[, colnames(dboutput)[\n        str_detect(colnames(dboutput), perl('^(?!num)'))]]\n      \n      flags <- \n        melt(flags, measure.vars=\n               names(flags[str_detect(names(flags),\n                                                  '^symb_')]),\n             variable.name = 'year', value.name = 'flag')\n      \n      flags$year <- as.numeric(str_replace(flags$year, '^symb_', ''))\n      \n      # Joining values and flags\n      dboutput <- join(valueswithoutsymb, flags, by = c('area', 'item',\n                                                        'ele', 'year'))\n      \n    } else dboutput <- valueswithoutsymb\n    \n\n\n  }\n    \n  dboutput\n  \n}\n",
    "created" : 1448983415727.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "268336737",
    "id" : "B227804A",
    "lastKnownWriteTime" : 1448983437,
    "path" : "~/GitHub/faoswsLoss_NG/R/sws_query.r",
    "project_path" : "R/sws_query.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}