library(bit64)
library(curl)
library(faosws)
library(faoswsUtil)
library(lme4)
library(data.table)
library(magrittr)
library(reshape2)
library(igraph)
library(plyr)
library(dplyr)
library(RJDBC)
library(ggplot2)
})
suppressMessages({
library(bit64)
library(curl)
library(faosws)
library(faoswsUtil)
library(lme4)
library(data.table)
library(magrittr)
library(reshape2)
library(igraph)
library(plyr)
library(dplyr)
library(RJDBC)
library(ggplot2)
})
updateModel = TRUE
R_SWS_SHARE_PATH <- Sys.getenv("R_SWS_SHARE_PATH")
DEBUG_MODE <- Sys.getenv("R_DEBUG_MODE")
getwd()
suppressMessages({
library(bit64)
library(curl)
library(faosws)
library(faoswsUtil)
library(lme4)
library(data.table)
library(magrittr)
library(reshape2)
library(igraph)
library(plyr)
library(dplyr)
library(RJDBC)
library(ggplot2)
})
updateModel = TRUE
## Set up for the test environment and parameters
R_SWS_SHARE_PATH <- Sys.getenv("R_SWS_SHARE_PATH")
DEBUG_MODE <- Sys.getenv("R_DEBUG_MODE")
if(!exists("DEBUG_MODE") || DEBUG_MODE == "") {
if(Sys.info()[7] == "Golini"){ # Nata's work computer
SetClientFiles(dir = "~/R certificate files/Production/")
files = dir("~/Documents/Github/faoswsLoss_NG/R", full.names = TRUE)
token = "e16a500b-2077-471b-8edf-6d810a85814d" # Nata's token
} else {
stop("User not yet implemented!")
}
GetTestEnvironment(
## baseUrl = "https://hqlqasws1.hq.un.fao.org:8181/sws",
baseUrl = "https://hqlprswsas1.hq.un.fao.org:8181/sws",
token = token
)
sapply(files, source)
}
files
SetClientFiles
SetClientFiles(dir = "~/R certificate files/Production/")
files = dir("~/Documents/Github/faoswsLoss_NG/R", full.names = TRUE)
files
files = dir("~/GitHub/faoswsLoss_NG/R/", full.names = TRUE)
files
if(!exists("DEBUG_MODE") || DEBUG_MODE == "") {
if(Sys.info()[7] == "Golini"){ # Nata's work computer
SetClientFiles(dir = "~/R certificate files/Production/")
files = dir("~/GitHub/faoswsLoss_NG/R/", full.names = TRUE)
token = "e16a500b-2077-471b-8edf-6d810a85814d" # Nata's token
} else {
stop("User not yet implemented!")
}
GetTestEnvironment(
## baseUrl = "https://hqlqasws1.hq.un.fao.org:8181/sws",
baseUrl = "https://hqlprswsas1.hq.un.fao.org:8181/sws",
token = token
)
sapply(files, source)
}
addHeadingsFCL = function(measuredItemFCL){
ifelse(nchar(measuredItemFCL) == 2,
paste0("00",measuredItemFCL, sep = ""),
ifelse(nchar(measuredItemFCL) == 3,
paste0("0",measuredItemFCL, sep = ""),
measuredItemFCL))
}
files
dir("~/GitHub/faoswsLoss_NG/R/", full.names = TRUE)[-1]
files = dir("~/GitHub/faoswsLoss_NG/R/", full.names = TRUE)[-10]
files
if(!exists("DEBUG_MODE") || DEBUG_MODE == "") {
if(Sys.info()[7] == "Golini"){ # Nata's work computer
SetClientFiles(dir = "~/R certificate files/Production/")
files = dir("~/GitHub/faoswsLoss_NG/R/", full.names = TRUE)[-10]
token = "e16a500b-2077-471b-8edf-6d810a85814d" # Nata's token
} else {
stop("User not yet implemented!")
}
GetTestEnvironment(
## baseUrl = "https://hqlqasws1.hq.un.fao.org:8181/sws",
baseUrl = "https://hqlprswsas1.hq.un.fao.org:8181/sws",
token = token
)
sapply(files, source)
}
selectedYear = as.character(1961:2015)
areaVar = "geographicAreaM49"
yearVar = "timePointYears"
itemVar = "measuredItemCPC"
elementVar = "measuredElement"
valuePrefix = "Value_"
flagObsPrefix = "flagObservationStatus_"
flagMethodPrefix = "flagMethod_"
production <<- getProductionData()
requiredItems <<- getAllItemCPC()
Q
requiredItems <<- getAllItemCPC()
requiredItems <<- getRequiredItems()
if(updateModel){
finalModelData =
{
requiredItems <<- getRequiredItems()
production <<- getProductionData()
import <<- getImportData()
loss <<- getOfficialLossData()
lossFoodGroup <<- getLossFoodGroup()
#   countryTable <<-
#     GetCodeList(domain = "agriculture",
#                 dataset = "agriculture",
#                 dimension = "geographicAreaM49")[type == "country",
#                                                  list(code, description)]
#   setnames(countryTable,
#            old = c("code", "description"),
#            new = c("geographicAreaM49", "geographicAreaM49Name"))
} %>%
mergeAllLossData(lossData = loss, production, import, lossFoodGroup) %>%
subset(x = .,
subset = ((Value_measuredElement_5510 == 0 & Value_measuredElement_5600 > 0) |
(Value_measuredElement_5510 > 0 & Value_measuredElement_5600 >= 0)),
select = c("geographicAreaM49",
"measuredItemCPC",
"timePointYears",
"Value_measuredElement_5120", # loss
"Value_measuredElement_5510", # production
"Value_measuredElement_5600", # import
"foodGroupName",
"foodPerishableGroup")) %>%
removeCarryLoss(data = ., lossVar = "Value_measuredElement_5120") %>%
## Convert variables to factor
.[, `:=`(c("geographicAreaM49",
"measuredItemCPC",
"foodGroupName",
"foodPerishableGroup"),
lapply(c("geographicAreaM49",
"measuredItemCPC",
"foodGroupName",
"foodPerishableGroup"),
FUN = function(x) as.factor(.SD[[x]])
)
)
]
}
requiredItems <<- getRequiredItems()
production <<- getProductionData()
import <<- getImportData()
getwd()
R_SWS_SHARE_PATH
DEBUG_MODE
files
source("sws_query.r")
setwd("~/GitHub/faoswsLoss_NG/R/")
source("sws_query.r")
import <<- getImportData()
loss <<- getOfficialLossData()
lossFoodGroup <<- getLossFoodGroup()
if(updateModel){
finalModelData =
{
requiredItems <<- getRequiredItems()
production <<- getProductionData()
setwd("~/GitHub/faoswsLoss_NG/R/")
source("sws_query.r")
import <<- getImportData()
loss <<- getOfficialLossData()
lossFoodGroup <<- getLossFoodGroup()
#   countryTable <<-
#     GetCodeList(domain = "agriculture",
#                 dataset = "agriculture",
#                 dimension = "geographicAreaM49")[type == "country",
#                                                  list(code, description)]
#   setnames(countryTable,
#            old = c("code", "description"),
#            new = c("geographicAreaM49", "geographicAreaM49Name"))
} %>%
mergeAllLossData(lossData = loss, production, import, lossFoodGroup) %>%
subset(x = .,
subset = ((Value_measuredElement_5510 == 0 & Value_measuredElement_5600 > 0) |
(Value_measuredElement_5510 > 0 & Value_measuredElement_5600 >= 0)),
select = c("geographicAreaM49",
"measuredItemCPC",
"timePointYears",
"Value_measuredElement_5120", # loss
"Value_measuredElement_5510", # production
"Value_measuredElement_5600", # import
"foodGroupName",
"foodPerishableGroup")) %>%
removeCarryLoss(data = ., lossVar = "Value_measuredElement_5120") %>%
## Convert variables to factor
.[, `:=`(c("geographicAreaM49",
"measuredItemCPC",
"foodGroupName",
"foodPerishableGroup"),
lapply(c("geographicAreaM49",
"measuredItemCPC",
"foodGroupName",
"foodPerishableGroup"),
FUN = function(x) as.factor(.SD[[x]])
)
)
]
lossLmeModel =
lmer(log(Value_measuredElement_5120 + 1) ~
-1 +
timePointYears +
log(Value_measuredElement_5510 + 1) +
(-1 + log(Value_measuredElement_5510 + 1)|
foodPerishableGroup/foodGroupName/measuredItemCPC/geographicAreaM49)+
log(Value_measuredElement_5600 + 1) +
(-1 + log(Value_measuredElement_5600 + 1)|
measuredItemCPC/geographicAreaM49),
data = finalModelData)
# par(mfrow=c(1,1))
# qqnorm(residuals(lossLmeModel))
# qqline(residuals(lossLmeModel))
# lossModelPath = paste0(R_SWS_SHARE_PATH, "/lossLmeModel")
# saveRDS(lossLmeModel, lossModelPath)
}
finalPredictData =
{
if(!updateModel){
#    requiredItems <<- getAllItemCPC()
production <<- getProductionData()
import <<- getImportData()
lossFoodGroup <<- getLossFoodGroup()
#    lossRegionClass <<- getLossRegionClass()
#     countryTable <<-
#       GetCodeList(domain = "agriculture",
#                   dataset = "agriculture",
#                   dimension = "geographicAreaM49")[type == "country",
#                                                    list(code, description)]
#     setnames(countryTable,
#              old = c("code", "description"),
#              new = c("geographicAreaM49", "geographicAreaM49Name"))
}
loss <<- getSelectedLossData()
} %>%
mergeAllLossData(lossData = loss, production, import, lossFoodGroup) %>%
subset(x = .,
subset = ((Value_measuredElement_5510 == 0 & Value_measuredElement_5600 > 0) |
(Value_measuredElement_5510 > 0 & Value_measuredElement_5600 >= 0)),
select = c("geographicAreaM49",
"measuredItemCPC",
"timePointYears",
"Value_measuredElement_5120", # loss
"flagObservationStatus_measuredElement_5120",
"Value_measuredElement_5510", # production
"Value_measuredElement_5600", # import
"foodGroupName",
"foodPerishableGroup")) %>%
removeCarryLoss(data = ., lossVar = "Value_measuredElement_5120") %>%
## Convert variables to factor
.[, `:=`(c("geographicAreaM49",
"measuredItemCPC",
"foodGroupName",
"foodPerishableGroup"),
lapply(c("geographicAreaM49",
"measuredItemCPC",
"foodGroupName",
"foodPerishableGroup"),
FUN = function(x) as.factor(.SD[[x]])
)
)
]
finalPredictData %>%
imputeLoss(data = .,
lossVar = "Value_measuredElement_5120",
lossObservationFlagVar =
"flagObservationStatus_measuredElement_5120",
lossMethodFlagVar = "flagMethod_measuredElement_5120",
lossModel = lossLmeModel)
library(roxygen2)
load(roxigen2)
load(roxygen2 )
library(roxygen2)
package.skeleton("faoswsLoss_NG")
